name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build_frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend
      - name: Build frontend
        run: npm run build
        working-directory: ./frontend
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  build_backend:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: server
            name: server-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: server
            name: server-linux-arm64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            bin: agent
            name: agent-linux-amd64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            bin: agent
            name: agent-linux-arm64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: agent
            name: agent-windows-amd64.exe
          - os: macos-13
            target: x86_64-apple-darwin
            bin: agent
            name: agent-macos-amd64
          - os: macos-14
            target: aarch64-apple-darwin
            bin: agent
            name: agent-macos-arm64
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      - name: Install cross
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}
      - name: Setup protoc
        uses: arduino/setup-protoc@v3
      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: backend/target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.target }}
      - name: Build backend
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --bin ${{ matrix.bin }} --target ${{ matrix.target }}
          else
            cargo build --release --bin ${{ matrix.bin }} --target ${{ matrix.target }}
          fi
        working-directory: ./backend
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}
          path: backend/target/${{ matrix.target }}/release/${{ matrix.bin }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  create_release:
    needs: [build_frontend, build_backend]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/server-linux-amd64/server
          asset_name: server-linux-amd64
          asset_content_type: application/octet-stream
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/server-linux-arm64/server
          asset_name: server-linux-arm64
          asset_content_type: application/octet-stream
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/agent-linux-amd64/agent
          asset_name: agent-linux-amd64
          asset_content_type: application/octet-stream
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/agent-linux-arm64/agent
          asset_name: agent-linux-arm64
          asset_content_type: application/octet-stream
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/agent-windows-amd64/agent.exe
          asset_name: agent-windows-amd64.exe
          asset_content_type: application/octet-stream
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/agent-macos-amd64/agent
          asset_name: agent-macos-amd64
          asset_content_type: application/octet-stream
      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/agent-macos-arm64/agent
          asset_name: agent-macos-arm64
          asset_content_type: application/octet-stream