syntax = "proto3";

package agent_service;

// ====== General Enums & Shared Messages ======

enum OsType {
  OS_TYPE_UNSPECIFIED = 0;
  OS_TYPE_LINUX = 1;
  OS_TYPE_WINDOWS = 2;
  OS_TYPE_MACOS = 3;
  OS_TYPE_OTHER = 4;
}

enum AgentConnectionStatus {
  AGENT_STATUS_UNSPECIFIED = 0;
  AGENT_STATUS_CONNECTING = 1;
  AGENT_STATUS_CONNECTED = 2;
  AGENT_STATUS_DISCONNECTED = 3;
  AGENT_STATUS_AUTH_FAILED = 4;
  AGENT_STATUS_ERROR = 5;
}

// ====== Handshake and Authentication ======

message AgentHandshake {
  string agent_id_hint = 1;         // Agent's last known ID or a new proposed ID (e.g., MAC based)
  string agent_version = 2;
  OsType os_type = 3;
  string os_name = 4;             // e.g., "Ubuntu 22.04 LTS"
  string arch = 5;                // e.g., "x86_64", "aarch64"
  string hostname = 6;
  string current_agent_secret = 7;  // Secret for authentication
  // string current_config_hash = 8; // Optional: Agent can send hash of its current config for quick check
}

message ServerHandshakeAck {
  bool authentication_successful = 1;
  string error_message = 2;          // If authentication_successful is false
  string assigned_agent_id = 3;      // Server confirms or assigns the agent_id
  AgentConfig initial_config = 4;    // Server sends the initial or updated configuration
  string new_agent_secret = 5;       // Optional: Server can issue a new secret for rotation
  int64 server_time_unix_ms = 6;   // Server's current UTC time in milliseconds
}

// ====== Agent Configuration (Server to Agent) ======

message AgentConfig {
  uint32 metrics_collect_interval_seconds = 1;  // How often Agent collects data locally. Min 1.
  uint32 metrics_upload_batch_max_size = 2;     // Max PerformanceSnapshot items per batch.
  uint32 metrics_upload_interval_seconds = 3;   // How often Agent attempts to upload a batch. Min 1.
                                                // If batch max size is reached before this interval, upload sooner.
  
  uint32 docker_info_collect_interval_seconds = 4; // How often Agent collects Docker info. Min 1.
  uint32 docker_info_upload_interval_seconds = 5;  // How often Agent uploads Docker info. Min 1.
                                                   // Docker info is usually a full snapshot.

  uint32 generic_metrics_upload_batch_max_size = 6; // Max GenericMetric items per batch.
  uint32 generic_metrics_upload_interval_seconds = 7; // Fallback upload interval for generic metrics.

  map<string, string> feature_flags = 8;       // e.g., "detailed_disk_stats": "true"
  string log_level = 9;                        // e.g., "INFO", "DEBUG", "ERROR"
  uint32 heartbeat_interval_seconds = 10;      // Expected interval for Agent heartbeats. Min 5.
}

// ====== Metrics Data (Agent to Server) ======

message DiskUsage {
  string mount_point = 1;
  uint64 used_bytes = 2;
  uint64 total_bytes = 3;
  string fstype = 4;
  double usage_percent = 5;
}

message NetworkInterfaceStats {
  string interface_name = 1;
  uint64 rx_bytes_per_sec = 2;
  uint64 tx_bytes_per_sec = 3;
  uint64 rx_packets_per_sec = 4;
  uint64 tx_packets_per_sec = 5;
  uint64 rx_errors_total_cumulative = 6; // Cumulative errors since boot/reset
  uint64 tx_errors_total_cumulative = 7; // Cumulative errors since boot/reset
}

message PerformanceSnapshot {
  int64 timestamp_unix_ms = 1;        // UTC milliseconds
  float cpu_overall_usage_percent = 2;
  uint64 memory_usage_bytes = 3;
  uint64 memory_total_bytes = 4;
  uint64 swap_usage_bytes = 5;
  uint64 swap_total_bytes = 6;
  uint64 disk_total_io_read_bytes_per_sec = 7;
  uint64 disk_total_io_write_bytes_per_sec = 8;
  repeated DiskUsage disk_usages = 9;
  repeated NetworkInterfaceStats network_interface_stats = 10;
  float load_average_one_min = 11;
  float load_average_five_min = 12;
  float load_average_fifteen_min = 13;
  uint64 uptime_seconds = 14;
  uint32 total_processes_count = 15;
  uint32 running_processes_count = 16;
  uint32 tcp_established_connection_count = 17;
}

message PerformanceSnapshotBatch {
  repeated PerformanceSnapshot snapshots = 1;
}

// ====== Docker Info (Agent to Server) ======

enum DockerContainerStatus {
  DOCKER_CONTAINER_STATUS_UNSPECIFIED = 0;
  DOCKER_CONTAINER_STATUS_CREATED = 1;
  DOCKER_CONTAINER_STATUS_RESTARTING = 2;
  DOCKER_CONTAINER_STATUS_RUNNING = 3;
  DOCKER_CONTAINER_STATUS_REMOVING = 4;
  DOCKER_CONTAINER_STATUS_PAUSED = 5;
  DOCKER_CONTAINER_STATUS_EXITED = 6;
  DOCKER_CONTAINER_STATUS_DEAD = 7;
}

message DockerPortMapping { // Renamed from PortMapping to avoid conflict if top-level PortMapping exists
  string ip = 1;
  uint32 private_port = 2;
  uint32 public_port = 3;
  string type = 4; // "tcp", "udp"
}

message DockerMountPoint { // Renamed from MountPoint
  string type = 1;
  string source = 2;
  string destination = 3;
  string mode = 4;
  bool rw = 5;
  string propagation = 6;
}

message DockerContainerInfo {
  string id = 1;
  repeated string names = 2;
  string image = 3;
  string image_id = 4;
  string command = 5;
  int64 created_unix_s = 6; // UTC seconds
  DockerContainerStatus status = 7; // Changed from string 'state' to enum
  string status_string = 8; // e.g., "Up 2 hours", "Exited (0) 5 minutes ago"
  repeated DockerPortMapping ports = 9;
  map<string, string> labels = 10;
  repeated DockerMountPoint mounts = 11;
  map<string, string> network_settings_networks = 12; // network_name -> network_id

  float cpu_usage_percent = 13;
  uint64 memory_usage_bytes = 14;
  uint64 memory_limit_bytes = 15;
  uint64 network_rx_bytes_total_cumulative = 16;
  uint64 network_tx_bytes_total_cumulative = 17;
  uint64 disk_read_bytes_total_cumulative = 18;
  uint64 disk_write_bytes_total_cumulative = 19;
  uint32 restarts_count = 20;
}

message DockerInfoBatch {
  repeated DockerContainerInfo containers_info = 1;
  // string docker_version = 2; // Optional: Docker engine version
  // uint32 active_containers_count = 3;
  // uint32 total_images_count = 4;
}

// ====== Generic Metrics (Agent to Server) ======
// Reusing and adapting existing Metric definition for flexibility

message GenericMetricValue {
  oneof value_type {
    double double_value = 1;
    int64 int64_value = 2;
    string string_value = 3;
    bool bool_value = 4;
    bytes bytes_value = 5;
  }
}

message GenericMetric {
  string name = 1;                      // e.g., "custom.app.requests_total"
  int64 timestamp_unix_ms = 2;          // UTC milliseconds
  GenericMetricValue value = 3;
  map<string, string> tags = 4;         // e.g., {"service": "auth", "instance": "0"}
}

message GenericMetricsBatch {
  repeated GenericMetric metrics = 1;
}

// ====== Command Execution (Server <-> Agent) ======

enum CommandExecutionType {
  CMD_EXEC_TYPE_UNSPECIFIED = 0;
  CMD_EXEC_TYPE_SHELL = 1;
  // Docker specific commands can be sub-types or use parameters
  CMD_EXEC_TYPE_DOCKER_OPERATION = 2; 
  CMD_EXEC_TYPE_FILE_MANAGEMENT = 3;
  // CMD_EXEC_TYPE_PING = 4; // Simple ping for testing command channel
}

// For CMD_EXEC_TYPE_DOCKER_OPERATION
message DockerCommandPayload {
  enum DockerAction {
    DOCKER_ACTION_UNSPECIFIED = 0;
    START_CONTAINER = 1;
    STOP_CONTAINER = 2;
    RESTART_CONTAINER = 3;
    GET_CONTAINER_LOGS = 4;
    REMOVE_CONTAINER = 5;
    // PRUNE_IMAGES, PRUNE_VOLUMES, etc.
  }
  DockerAction action = 1;
  string target_id = 2; // Container ID or Name
  map<string, string> arguments = 3; // e.g., for logs: {"tail": "100", "since": "1h"}
                                      // for stop: {"timeout_seconds": "10"}
}

// For CMD_EXEC_TYPE_FILE_MANAGEMENT
message FileManagementOperation {
  enum FileAction {
    FILE_ACTION_UNSPECIFIED = 0;
    LIST_DIRECTORY = 1;
    GET_FILE_CHUNK = 2;     // Download
    PUT_FILE_CHUNK = 3;     // Upload
    DELETE_ITEM = 4;        // File or Directory
    STAT_ITEM = 5;
    CREATE_DIRECTORY = 6;
    MOVE_ITEM = 7;          // Rename or move
  }
  FileAction action = 1;
  string path = 2;
  // For MOVE_ITEM
  string destination_path = 3;
  // For PUT_FILE_CHUNK / GET_FILE_CHUNK
  bytes data_chunk = 4;
  int64 offset = 5;
  bool is_last_chunk = 6; // For PUT (client indicates) / GET (server indicates)
  uint32 chunk_size_request = 7; // For GET_FILE_CHUNK, client requests this size
  // For CREATE_DIRECTORY, PUT_FILE_CHUNK
  bool create_parents_if_needed = 8;
  // For DELETE_ITEM (if directory)
  bool recursive_delete = 9;
}

message CommandRequest {
  string request_id = 1;        // Unique ID generated by Server for tracking
  CommandExecutionType type = 2;
  oneof payload {
    string shell_command = 3;             // For CMD_EXEC_TYPE_SHELL
    DockerCommandPayload docker_command = 4; // For CMD_EXEC_TYPE_DOCKER_OPERATION
    FileManagementOperation file_operation = 5; // For CMD_EXEC_TYPE_FILE_MANAGEMENT
    // string ping_payload = 6; // For CMD_EXEC_TYPE_PING
  }
  uint32 timeout_seconds = 7;     // Optional: command execution timeout
  map<string, string> context_params = 8; // Generic parameters for specific commands if needed
}

message FileStat { // Reused from existing, adapted for FileManagementOperation result
  string name = 1;
  string path = 2;
  enum ItemType {
    ITEM_TYPE_UNSPECIFIED = 0;
    ITEM_TYPE_FILE = 1;
    ITEM_TYPE_DIRECTORY = 2;
    ITEM_TYPE_SYMLINK = 3;
    ITEM_TYPE_OTHER = 4;
  }
  ItemType item_type = 3;
  int64 size_bytes = 4;
  uint32 mode_permissions = 5; // POSIX permissions (e.g., 0755)
  int64 modified_time_unix_ms = 6;
  int64 access_time_unix_ms = 7;
  string owner_user = 8;
  string owner_group = 9;
}

message FileManagementResult {
  // For STAT_ITEM
  FileStat item_stat = 1;
  // For LIST_DIRECTORY
  repeated FileStat directory_listing = 2;
  // For GET_FILE_CHUNK
  bytes data_chunk = 3;
  int64 offset_returned = 4;
  bool is_eof = 5; // True if this is the last chunk of the file
  // For PUT_FILE_CHUNK
  int64 bytes_written_cumulative = 6;
}

message CommandResponse {
  string request_id = 1;      // Corresponds to CommandRequest.request_id
  bool success = 2;
  string error_message = 3;   // If success is false, or for stderr-like info
  
  oneof result_payload {
    string shell_output = 4;        // For CMD_EXEC_TYPE_SHELL (stdout)
    int32 shell_exit_code = 5;      // For CMD_EXEC_TYPE_SHELL
    // DockerCommandResult docker_result = 6; // Could be structured for Docker ops
    FileManagementResult file_result = 7;   // For CMD_EXEC_TYPE_FILE_MANAGEMENT
    // string ping_response_payload = 8; // For CMD_EXEC_TYPE_PING
  }
}

// ====== PTY / Webshell Streaming (Server <-> Agent) ======
// Reuses existing PtyResize, adapts PtyStreamMessage

message PtyResize { // From existing proto
  uint32 rows = 1;
  uint32 cols = 2;
}

message PtyStartCommand { // Part of CommandRequest or initial PTY setup message
  string session_id = 1;          // Unique ID for this PTY session, generated by server
  string shell_to_use = 2;        // e.g., "bash", "sh", "" for default
  PtyResize initial_size = 3;
  map<string, string> env_variables = 4;
  string working_directory = 5;
}

// Messages specific to an active PTY stream, distinct from general command stream
// This implies PTY might need its own dedicated stream or be carefully multiplexed.
// For simplicity with one main stream, PTY messages are wrapped.

message PtyDataToServer { // Agent to Server (PTY output)
  string session_id = 1;
  bytes output_data = 2; // Data from PTY stdout/stderr
  bool stream_closed_by_agent = 3;
  string error_message = 4; // If PTY on agent side encounters an error
}

message PtyDataToAgent { // Server to Agent (PTY input/control)
  string session_id = 1;
  oneof control_event {
    PtyStartCommand start_command = 2; // First message to initiate PTY on agent
    bytes input_data = 3;           // Data from client to PTY stdin
    PtyResize resize_event = 4;     // Client requests PTY resize
    bool close_signal_from_server = 5; // Server requests to close this PTY session
  }
}


// ====== Heartbeat (Agent <-> Server) ======
message Heartbeat {
  int64 timestamp_unix_ms = 1;
  // AgentStatus agent_current_status = 2; // Optional: Agent can report its high-level status
  // uint32 pending_upload_batches = 3; // Optional: Agent reports backlog
}

// ====== Top-Level Stream Messages ======

message MessageToServer {
  uint64 client_message_id = 1; // Client-generated ID for this specific message, for ACKs if needed

  oneof payload {
    AgentHandshake agent_handshake = 2;         // First message from Agent
    PerformanceSnapshotBatch performance_batch = 3;
    DockerInfoBatch docker_batch = 4;
    GenericMetricsBatch generic_metrics_batch = 5;
    CommandResponse command_response = 6;
    PtyDataToServer pty_data_to_server = 7;     // Output from Agent's PTY
    Heartbeat heartbeat = 8;
    // AckForServerMessage ack_for_server_message = 9; // If explicit ACKs from agent are needed
  }
}

message MessageToAgent {
  uint64 server_message_id = 1; // Server-generated ID for this specific message, for ACKs if needed

  oneof payload {
    ServerHandshakeAck server_handshake_ack = 2; // First reply from Server
    AgentConfig agent_config = 3;
    CommandRequest command_request = 4;
    PtyDataToAgent pty_data_to_agent = 5;       // Input/control for Agent's PTY
    Heartbeat heartbeat_request = 6;            // Server can request a heartbeat
    // AckForClientMessage ack_for_client_message = 7; // If explicit ACKs from server are needed
  }
}

// ====== Service Definition ======

service AgentCommunicationService {
  // Establishes a persistent bi-directional communication channel.
  // Agent initiates this stream.
  rpc EstablishCommunicationStream(stream MessageToServer) returns (stream MessageToAgent);

  // Fallback/alternative unary calls for specific simple actions if needed,
  // though the stream is preferred for most interactions.
  // rpc SimpleHeartbeat(Heartbeat) returns (HeartbeatResponse); // Example
}